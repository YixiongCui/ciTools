% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_ci_lmer.R
\name{add_ci.lmerMod}
\alias{add_ci.lmerMod}
\title{Confidence Intervals for Linear Mixed Models}
\usage{
\method{add_ci}{lmerMod}(tb, fit, alpha = 0.05, names = NULL,
  type = "boot", includeRanef = TRUE, nSims = 200, yhatName = "pred",
  ...)
}
\arguments{
\item{tb}{A tibble or Data Frame.}

\item{fit}{An object of class \code{lmerMod}.}

\item{alpha}{A real number between 0 and 1. Controls the confidence
level of the interval estimates.}

\item{names}{NULL or character vector of length two. If
\code{NULL}, confidence bounds will automatically be named by
\code{add_ci}, otherwise, the lower confidence bound will be
named \code{names[1]} and the upper confidence bound will be
named \code{names[2]}.}

\item{type}{A string, either \code{"parametric"}, \code{"boot"}, or
\code{"sim"}. If \code{type = "sim"}, then \code{add_ci} calls
the function \code{predictInterval} from \code{merTools}. If
\code{type = "boot"}, then \code{add_ci} calls the function
\code{bootMer} from \code{lme4}.}

\item{includeRanef}{A logical. Default is \code{TRUE}. Set whether
the predictions and intervals should be made conditional on the
random effects. If \code{FALSE}, random effects will not be
included.}

\item{nSims}{A positive integer.  Controls the number of bootstrap
replicates if \code{type = "boot"}, or the number of simulated
draws if \code{type = "sim"}. We typically use between 1000 and
10000 simulations.}

\item{yhatName}{A string. Name of the predictions vector.}

\item{...}{Additional arguments.}
}
\value{
A tibble, \code{tb}, with predicted values, upper and lower
    confidence bounds attached.
}
\description{
This function is one of the methods for \code{add_ci}, and is
called automatically when \code{add_ci} is used on a \code{fit} of
class \code{lmerMod}. It is recommended that one use parametric
confidence intervals when modeling with a random intercept
LMM. Otherwise confidence intervals may be simulated (type =
\code{"sim"}) via \code{predictInterval} from \code{merTools} or
bootstrapped (\code{type = "boot"}) via \code{bootMer} from
\code{lme4}.
}
\details{
Bootstrapped intervals are the slowest to compute, but recommended
method when working with linear mixed models.
}
\examples{
dat <- lme4::sleepstudy
fit <- lme4::lmer(Reaction ~ Days + (1|Subject), data = lme4::sleepstudy)
add_ci(dat, fit, alpha = 0.5)
add_ci(dat, fit, alpha = 0.5, type = "parametric", includeRanef = FALSE)
add_ci(dat, fit, alpha = 0.5, type = "sim", names = c("lwr", "upr"), nSims = 1000)

}
\seealso{
\code{{\link{add_pi.lmerMod}}} for prediction intervals
    for \code{lmerMod} objects. \code{\link{add_probs.lmerMod}} for
    conditional probabilities of \code{lmerMod} objects, and
    \code{\link{add_quantile.lmerMod}} for response quantiles of
    \code{lmerMod} objects.
}
